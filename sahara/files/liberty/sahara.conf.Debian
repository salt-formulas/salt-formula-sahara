{%- from "sahara/map.jinja" import server with context %}
[DEFAULT]

# Hostname or IP address that will be used to listen on.
# (string value)
host={{ server.bind.host }}

# Port that will be used to listen on. (integer value)
port={{ server.bind.port }}

# If set to True, Sahara will use floating IPs to communicate
# with instances. To make sure that all instances have
# floating IPs assigned in Nova Network set
# "auto_assign_floating_ip=True" in nova.conf.If Neutron is
# used for networking, make sure that all Node Groups have
# "floating_ip_pool" parameter defined. (boolean value)
use_floating_ips=true

# Use Neutron or Nova Network (boolean value)
use_neutron=true

# Use network namespaces for communication (only valid to use in conjunction
# with use_neutron=True)
#use_namespaces=false


# Maximum length of job binary data in kilobytes that may be
# stored or retrieved in a single operation (integer value)
#job_binary_max_KB=5120

# Postfix for storing jobs in hdfs. Will be added to
# /user/hadoop/ (string value)
#job_workflow_postfix=

# enable periodic tasks (boolean value)
#periodic_enable=true



# Enables data locality for hadoop cluster.
# Also enables data locality for Swift used by hadoop.
# If enabled, 'compute_topology' and 'swift_topology'
# configuration parameters should point to OpenStack and Swift
# topology correspondingly. (boolean value)
#enable_data_locality=false

# File with nova compute topology. It should
# contain mapping between nova computes and racks.
# File format:
# compute1 /rack1
# compute2 /rack2
# compute3 /rack2
# (string value)
#compute_topology_file=etc/sahara/compute.topology

# File with Swift topology. It should contains mapping
# between Swift nodes and racks. File format:
# node1 /rack1
# node2 /rack2
# node3 /rack2
# (string value)
#swift_topology_file=etc/sahara/swift.topology



# Log request/response exchange details: environ, headers and
# bodies. (boolean value)
#log_exchange=false

# Print debugging output (set logging level to DEBUG instead
# of default WARNING level). (boolean value)
debug=false

# Print more verbose output (set logging level to INFO instead
# of default WARNING level). (boolean value)
verbose=true

# Log output to standard error. (boolean value)
#use_stderr=true

# (Optional) Name of log file to output to. If no default is
# set, logging will go to stdout. (string value)
#log_file=<None>

# (Optional) The base directory used for relative --log-file
# paths. (string value)
log_dir=/var/log/sahara

# Use syslog for logging. Existing syslog format is DEPRECATED
# during I, and will change in J to honor RFC5424. (boolean
# value)
use_syslog=false

# Syslog facility to receive log lines. (string value)
#syslog_log_facility=LOG_USER

# List of plugins to be loaded. Sahara preserves the order of
# the list when returning it. (list value)
plugins=vanilla,hdp,spark,cdh

rpc_backend=rabbit
{%- if server.message_queue.members is defined %}
rabbit_hosts={% for member in server.message_queue.members %}{{ member.host }}:{{ server.message_queue.port }}{% if not loop.last %},{% endif %}{% endfor %}
{%- else %}
rabbit_host={{ server.message_queue.host }}
rabbit_port={{ server.message_queue.port }}
{%- endif %}
rabbit_userid={{ server.message_queue.user }}
rabbit_password={{ server.message_queue.password }}
rabbit_virtual_host={{ server.message_queue.virtual_host }}

[database]

# The SQLAlchemy connection string used to connect to the
# database (string value)
connection={{ server.database.engine }}://{{ server.database.user }}:{{ server.database.password }}@{{ server.database.host }}:{{ server.database.port }}/{{ server.database.name }}

[keystone_authtoken]
# Complete public Identity API endpoint (string value)
auth_uri=http://{{ server.identity.host }}:5000/v2.0/

# Complete admin Identity API endpoint. This should specify
# the unversioned root endpoint eg. https://localhost:35357/
# (string value)
identity_uri=http://{{ server.identity.host }}:35357/

# Keystone account username (string value)
admin_user={{ server.identity.user }}

# Keystone account password (string value)
admin_password={{ server.identity.password }}

# Keystone service account tenant name to validate user tokens
# (string value)
admin_tenant_name={{ server.identity.tenant }}

{%- if server.notification %}
[oslo_messaging_notifications]
enable=true
driver=messaging
{%- endif %}
